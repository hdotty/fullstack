/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BorrowDto from './BorrowDto';

/**
 * The PersonDto model module.
 * @module model/PersonDto
 * @version 1.0
 */
class PersonDto {
    /**
     * Constructs a new <code>PersonDto</code>.
     * @alias module:model/PersonDto
     * @param email {String} 
     * @param firstName {String} 
     * @param lastName {String} 
     * @param password {String} 
     */
    constructor(email, firstName, lastName, password) { 
        
        PersonDto.initialize(this, email, firstName, lastName, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, firstName, lastName, password) { 
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>PersonDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonDto} obj Optional instance to populate.
     * @return {module:model/PersonDto} The populated <code>PersonDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonDto();

            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'Boolean');
            }
            if (data.hasOwnProperty('borrows')) {
                obj['borrows'] = ApiClient.convertToType(data['borrows'], [BorrowDto]);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('loggedIn')) {
                obj['loggedIn'] = ApiClient.convertToType(data['loggedIn'], 'Boolean');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('personId')) {
                obj['personId'] = ApiClient.convertToType(data['personId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PersonDto.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['borrows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['borrows'])) {
                throw new Error("Expected the field `borrows` to be an array in the JSON data but got " + data['borrows']);
            }
            // validate the optional field `borrows` (array)
            for (const item of data['borrows']) {
                BorrowDto.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }

        return true;
    }


}

PersonDto.RequiredProperties = ["email", "firstName", "lastName", "password"];

/**
 * @member {Boolean} admin
 */
PersonDto.prototype['admin'] = undefined;

/**
 * @member {Array.<module:model/BorrowDto>} borrows
 */
PersonDto.prototype['borrows'] = undefined;

/**
 * @member {String} email
 */
PersonDto.prototype['email'] = undefined;

/**
 * @member {String} firstName
 */
PersonDto.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
PersonDto.prototype['lastName'] = undefined;

/**
 * @member {Boolean} loggedIn
 */
PersonDto.prototype['loggedIn'] = undefined;

/**
 * @member {String} password
 */
PersonDto.prototype['password'] = undefined;

/**
 * @member {Number} personId
 */
PersonDto.prototype['personId'] = undefined;






export default PersonDto;

