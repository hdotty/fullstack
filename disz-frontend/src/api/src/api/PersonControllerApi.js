/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BorrowDto from '../model/BorrowDto';
import PersonDto from '../model/PersonDto';

/**
* PersonController service.
* @module api/PersonControllerApi
* @version 1.0
*/
export default class PersonControllerApi {

    /**
    * Constructs a new PersonControllerApi. 
    * @alias module:api/PersonControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addPersonUsingPOST operation.
     * @callback module:api/PersonControllerApi~addPersonUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addPerson
     * @param {module:model/PersonDto} personDto personDto
     * @param {module:api/PersonControllerApi~addPersonUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPersonUsingPOST(personDto, callback) {
      let postBody = personDto;
      // verify the required parameter 'personDto' is set
      if (personDto === undefined || personDto === null) {
        throw new Error("Missing the required parameter 'personDto' when calling addPersonUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/signIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePersonUsingDELETE operation.
     * @callback module:api/PersonControllerApi~deletePersonUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletePerson
     * @param {Number} id id
     * @param {module:api/PersonControllerApi~deletePersonUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePersonUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePersonUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/person/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findPersonUsingGET operation.
     * @callback module:api/PersonControllerApi~findPersonUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PersonDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findPerson
     * @param {String} query query
     * @param {module:api/PersonControllerApi~findPersonUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PersonDto>}
     */
    findPersonUsingGET(query, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling findPersonUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PersonDto];
      return this.apiClient.callApi(
        '/person/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoggedInPersonUsingGET operation.
     * @callback module:api/PersonControllerApi~getLoggedInPersonUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLoggedInPerson
     * @param {module:api/PersonControllerApi~getLoggedInPersonUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonDto}
     */
    getLoggedInPersonUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PersonDto;
      return this.apiClient.callApi(
        '/person/loggedIn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonUsingGET operation.
     * @callback module:api/PersonControllerApi~getPersonUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPerson
     * @param {Number} id id
     * @param {module:api/PersonControllerApi~getPersonUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonDto}
     */
    getPersonUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPersonUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PersonDto;
      return this.apiClient.callApi(
        '/person/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonsUsingGET operation.
     * @callback module:api/PersonControllerApi~getPersonsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PersonDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPersons
     * @param {module:api/PersonControllerApi~getPersonsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PersonDto>}
     */
    getPersonsUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PersonDto];
      return this.apiClient.callApi(
        '/person', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personsBooksUsingGET operation.
     * @callback module:api/PersonControllerApi~personsBooksUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BorrowDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * personsBooks
     * @param {module:model/PersonDto} personDto personDto
     * @param {module:api/PersonControllerApi~personsBooksUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BorrowDto>}
     */
    personsBooksUsingGET(personDto, callback) {
      let postBody = personDto;
      // verify the required parameter 'personDto' is set
      if (personDto === undefined || personDto === null) {
        throw new Error("Missing the required parameter 'personDto' when calling personsBooksUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BorrowDto];
      return this.apiClient.callApi(
        '/persons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pswChangeUsingPUT operation.
     * @callback module:api/PersonControllerApi~pswChangeUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pswChange
     * @param {String} newPassword newPassword
     * @param {String} oldPassword oldPassword
     * @param {module:model/PersonDto} personDto personDto
     * @param {module:api/PersonControllerApi~pswChangeUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pswChangeUsingPUT(newPassword, oldPassword, personDto, callback) {
      let postBody = personDto;
      // verify the required parameter 'newPassword' is set
      if (newPassword === undefined || newPassword === null) {
        throw new Error("Missing the required parameter 'newPassword' when calling pswChangeUsingPUT");
      }
      // verify the required parameter 'oldPassword' is set
      if (oldPassword === undefined || oldPassword === null) {
        throw new Error("Missing the required parameter 'oldPassword' when calling pswChangeUsingPUT");
      }
      // verify the required parameter 'personDto' is set
      if (personDto === undefined || personDto === null) {
        throw new Error("Missing the required parameter 'personDto' when calling pswChangeUsingPUT");
      }

      let pathParams = {
        'newPassword': newPassword,
        'oldPassword': oldPassword
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/person/{oldPassword}/{newPassword}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAsAdminUsingPOST operation.
     * @callback module:api/PersonControllerApi~setAsAdminUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * setAsAdmin
     * @param {module:model/PersonDto} personDto personDto
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.admin admin
     * @param {module:api/PersonControllerApi~setAsAdminUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setAsAdminUsingPOST(personDto, opts, callback) {
      opts = opts || {};
      let postBody = personDto;
      // verify the required parameter 'personDto' is set
      if (personDto === undefined || personDto === null) {
        throw new Error("Missing the required parameter 'personDto' when calling setAsAdminUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
        'admin': opts['admin']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/person/admin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePersonUsingPUT operation.
     * @callback module:api/PersonControllerApi~updatePersonUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updatePerson
     * @param {module:model/PersonDto} personDto personDto
     * @param {Object} opts Optional parameters
     * @param {String} opts.email email
     * @param {String} opts.firstName firstName
     * @param {String} opts.lastName lastName
     * @param {module:api/PersonControllerApi~updatePersonUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePersonUsingPUT(personDto, opts, callback) {
      opts = opts || {};
      let postBody = personDto;
      // verify the required parameter 'personDto' is set
      if (personDto === undefined || personDto === null) {
        throw new Error("Missing the required parameter 'personDto' when calling updatePersonUsingPUT");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': opts['email'],
        'firstName': opts['firstName'],
        'lastName': opts['lastName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/person', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
