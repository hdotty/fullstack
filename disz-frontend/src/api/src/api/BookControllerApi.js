/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BookDto from '../model/BookDto';

/**
* BookController service.
* @module api/BookControllerApi
* @version 1.0
*/
export default class BookControllerApi {

    /**
    * Constructs a new BookControllerApi. 
    * @alias module:api/BookControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBookUsingPOST operation.
     * @callback module:api/BookControllerApi~addBookUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBook
     * @param {module:model/BookDto} book book
     * @param {module:api/BookControllerApi~addBookUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBookUsingPOST(book, callback) {
      let postBody = book;
      // verify the required parameter 'book' is set
      if (book === undefined || book === null) {
        throw new Error("Missing the required parameter 'book' when calling addBookUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/books', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBookUsingDELETE operation.
     * @callback module:api/BookControllerApi~deleteBookUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteBook
     * @param {Number} id id
     * @param {module:api/BookControllerApi~deleteBookUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBookUsingDELETE(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBookUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/books/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findBooksByCategoryUsingGET operation.
     * @callback module:api/BookControllerApi~findBooksByCategoryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BookDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findBooksByCategory
     * @param {Object} opts Optional parameters
     * @param {String} opts.category category
     * @param {module:api/BookControllerApi~findBooksByCategoryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BookDto>}
     */
    findBooksByCategoryUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookDto];
      return this.apiClient.callApi(
        '/books/category', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findBooksUsingGET operation.
     * @callback module:api/BookControllerApi~findBooksUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BookDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findBooks
     * @param {String} query query
     * @param {module:api/BookControllerApi~findBooksUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BookDto>}
     */
    findBooksUsingGET(query, callback) {
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling findBooksUsingGET");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookDto];
      return this.apiClient.callApi(
        '/books/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findByPersonIdIsNotNullUsingGET operation.
     * @callback module:api/BookControllerApi~findByPersonIdIsNotNullUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BookDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findByPersonIdIsNotNull
     * @param {module:api/BookControllerApi~findByPersonIdIsNotNullUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BookDto>}
     */
    findByPersonIdIsNotNullUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookDto];
      return this.apiClient.callApi(
        '/books/borrowed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBookUsingGET operation.
     * @callback module:api/BookControllerApi~getBookUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBook
     * @param {Number} id id
     * @param {module:api/BookControllerApi~getBookUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookDto}
     */
    getBookUsingGET(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBookUsingGET");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BookDto;
      return this.apiClient.callApi(
        '/books/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBooksUsingGET operation.
     * @callback module:api/BookControllerApi~getBooksUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BookDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBooks
     * @param {module:api/BookControllerApi~getBooksUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BookDto>}
     */
    getBooksUsingGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookDto];
      return this.apiClient.callApi(
        '/books', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBookUsingPUT operation.
     * @callback module:api/BookControllerApi~updateBookUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBook
     * @param {module:model/BookDto} bookDto bookDto
     * @param {Object} opts Optional parameters
     * @param {String} opts.author author
     * @param {String} opts.category category
     * @param {String} opts.title title
     * @param {module:api/BookControllerApi~updateBookUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBookUsingPUT(bookDto, opts, callback) {
      opts = opts || {};
      let postBody = bookDto;
      // verify the required parameter 'bookDto' is set
      if (bookDto === undefined || bookDto === null) {
        throw new Error("Missing the required parameter 'bookDto' when calling updateBookUsingPUT");
      }

      let pathParams = {
      };
      let queryParams = {
        'author': opts['author'],
        'category': opts['category'],
        'title': opts['title']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/books', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
